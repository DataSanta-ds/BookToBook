---
swagger: "2.0"
info:
  description: "This is our BookToBook server"
  version: "1.0.0"
  title: "BookToBook"
  contact:
    name: "Davide Santambrogio"
    email: "santadavide1995@gmail.com"
host: "booktobook.herokuapp.com"
basePath: "/api"
tags:
- name: "Books"
- name: "Themes"
- name: "Genres"
- name: "Authors"
- name: "Events"
- name: "Users"
- name: "Purchases"
- name: "Reviews"
- name: "General"
schemes:
- "https"
- "http"
paths:
  /author/:
    get:
      tags:
      - "Authors"
      summary: "Get all Authors"
      operationId: "getAuthor"
      produces:
      - "applications/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        404:
          description: "Author not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Authors"
  /author/findByBook:
    get:
      tags:
      - "Authors"
      summary: "Get authors by book"
      operationId: "getAuthorFindByBook"
      produces:
      - "applications/json"
      parameters:
      - name: "ISBN"
        in: "query"
        description: "ISBN of the Book"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid ISBN supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Author not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Authors"
  /author/findByName:
    get:
      tags:
      - "Authors"
      summary: "Get authors by name"
      operationId: "getAuthorFindByName"
      produces:
      - "applications/json"
      parameters:
      - name: "Name"
        in: "query"
        description: "Name of the Author"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid Name supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Author not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Authors"
  /author/{AuthorID}:
    get:
      tags:
      - "Authors"
      summary: "Get Author by ID"
      operationId: "getAuthorAuthorID"
      produces:
      - "applications/json"
      parameters:
      - name: "AuthorID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "AuthorID format incorrect"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Author not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Authors"
  /book/:
    get:
      tags:
      - "Books"
      summary: "Get Books by general Info"
      operationId: "getBook"
      produces:
      - "applications/json"
      parameters:
      - name: "Info"
        in: "query"
        description: "Book Information"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Info format incorrect"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Book not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Books"
  /book/bestOfTheMonth:
    get:
      tags:
      - "Books"
      summary: "Get Books of the Month"
      description: "Best sellers this month"
      operationId: "getBookBestOfTheMonth"
      produces:
      - "applications/json"
      parameters:
      - name: "Month"
        in: "query"
        description: "This month"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid month supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Book not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Books"
  /book/favoriteReading:
    get:
      tags:
      - "Books"
      summary: "Get favorite Books"
      operationId: "getBookFavoriteReading"
      produces:
      - "applications/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "Book not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Books"
  /book/findByAuthor:
    get:
      tags:
      - "Books"
      summary: "Get Books by author"
      operationId: "getBookFindByAuthor"
      produces:
      - "applications/json"
      parameters:
      - name: "Name"
        in: "query"
        description: "firstname of the author"
        required: true
        type: "string"
        x-example: "Alessandro Manzoni"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid name or surname supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Book not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Books"
  /book/findByEvent:
    get:
      tags:
      - "Books"
      summary: "Get Books by event"
      operationId: "getBookFindByEvent"
      produces:
      - "applications/json"
      parameters:
      - name: "Eventname"
        in: "query"
        description: "name of the event"
        required: true
        type: "string"
        x-example: "Licia Troisi new book presentation"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid name supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Book not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Books"
  /book/findByGenre:
    get:
      tags:
      - "Books"
      summary: "Get Books by genre"
      operationId: "getBookFindByGenre"
      produces:
      - "applications/json"
      parameters:
      - name: "genre"
        in: "query"
        description: "genre of the book"
        required: false
        type: "string"
        x-example: "fantasy"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid genre supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Book not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Books"
  /book/findByTheme:
    get:
      tags:
      - "Books"
      summary: "Get Books by theme"
      operationId: "getBookFindByTheme"
      produces:
      - "applications/json"
      parameters:
      - name: "theme"
        in: "query"
        description: "theme of the book"
        required: false
        type: "string"
        x-example: "family"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid theme supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Book not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Books"
  /book/findByTitle:
    get:
      tags:
      - "Books"
      summary: "Get Books by title"
      description: "Returns a list of books"
      operationId: "getBookByTitle"
      produces:
      - "application/json"
      - "applications/json"
      parameters:
      - name: "Title"
        in: "query"
        required: true
        type: "string"
        x-example: "Re"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid title supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Book not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Books"
  /book/{ISBN}:
    get:
      tags:
      - "Books"
      summary: "Get Book by ISBN"
      operationId: "getBookISBN"
      produces:
      - "applications/json"
      parameters:
      - name: "ISBN"
        in: "path"
        description: "ID of the Book"
        required: true
        type: "integer"
        format: "int64"
        x-example: 9781402894626
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "ISBN format incorrect"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Book not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Books"
  /event/:
    get:
      tags:
      - "Events"
      summary: "Get all events"
      operationId: "getEvent"
      produces:
      - "applications/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        404:
          description: "Event not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
  /event/findByBook:
    get:
      tags:
      - "Events"
      summary: "Get Event by Book"
      operationId: "getEventFindByBook"
      produces:
      - "applications/json"
      parameters:
      - name: "ISBN"
        in: "query"
        description: "ISBN of the Book"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "ISBN format incorrect"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Event not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
  /event/findByMonth:
    get:
      tags:
      - "Events"
      summary: "Get Event by Month"
      operationId: "getEventFindByMonth"
      produces:
      - "applications/json"
      parameters:
      - name: "Month"
        in: "query"
        description: "Month of the Event"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Month format incorrect"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Event not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
  /event/findByName:
    get:
      tags:
      - "Events"
      summary: "Get Event by Name"
      operationId: "getEventFindByName"
      produces:
      - "applications/json"
      parameters:
      - name: "Name"
        in: "query"
        description: "Name of the Event"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Name format incorrect"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Event not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
  /event/{EventID}:
    get:
      tags:
      - "Events"
      summary: "Get Event by ID"
      operationId: "getEventEventID"
      produces:
      - "applications/json"
      parameters:
      - name: "EventID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "EventID format incorrect"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Event not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Events"
  /genre/:
    get:
      tags:
      - "Genres"
      summary: "Get all Genres"
      operationId: "getGenre"
      produces:
      - "applications/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Genre"
        404:
          description: "Genre not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Genres"
  /genre/findByBook:
    get:
      tags:
      - "Genres"
      summary: "Get Genres by book"
      operationId: "getGenreFindByBook"
      produces:
      - "applications/json"
      parameters:
      - name: "ISBN"
        in: "query"
        description: "ISBN of the Book"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Genre"
        400:
          description: "Invalid ISBN supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Genre not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Genres"
  /genre/{GenreName}:
    get:
      tags:
      - "Genres"
      summary: "Get Genre by name"
      operationId: "getGenreGenreName"
      produces:
      - "applications/json"
      parameters:
      - name: "GenreName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Genre"
        400:
          description: "Invalid genre supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Genre not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Genres"
  /purchase/:
    post:
      tags:
      - "Purchases"
      summary: "Create Purchase if it doesn't exist
                and add eventual book"
      operationId: "postPurchase"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - name: "ISBN"
          in: "formData"
          description: "ISBN of the Book"
          type: "string"
          required: false
      responses:
        200:
          description: "succesfull operation"
        400:
          description: "Format error"
      x-swagger-router-controller: "Purchases"
  /purchase/completed:
    post:
      tags:
      - "Purchases"
      summary: "Set Purchase as completed"
      operationId: "postPurchaseCompleted"
      parameters:
      - name: "Date"
        in: "query"
        description: "Date of the completion"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "successful operation"
        400:
          description: "format error"
      x-swagger-router-controller: "Purchases"
  /purchase/findByUser:
    get:
      tags:
      - "Purchases"
      summary: "Get Purchases by user"
      operationId: "getPurchaseFindByUser"
      produces:
      - "applications/json"
      parameters:
      - name: "UserID"
        in: "query"
        description: "Email of the User"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid UserID supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Purchases"
  /purchase/{PurchaseID}:
    get:
      tags:
      - "Purchases"
      summary: "Get Purchase by ID"
      operationId: "getPurchasePurchaseID"
      produces:
      - "applications/json"
      parameters:
      - name: "PurchaseID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "PurchaseID format incorrect"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Purchase not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Purchases"
    post:
      tags:
      - "Purchases"
      summary: "Add book in Purchase"
      operationId: "postPurchasePurchaseID"
      parameters:
      - name: "PurchaseID"
        in: "path"
        required: true
        type: "string"
      - name: "ISBN"
        in: "query"
        description: "ISBN of the Book"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Format error"
      x-swagger-router-controller: "Purchases"
    delete:
      tags:
      - "Purchases"
      summary: "Delete book in Purchase"
      operationId: "deletePurchasePurchaseID"
      parameters:
      - name: "PurchaseID"
        in: "path"
        required: true
        type: "string"
      - name: "ISBN"
        in: "query"
        description: "ISBN of the Book"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Format error"
      x-swagger-router-controller: "Purchases"
  /review/:
    post:
      tags:
      - "Reviews"
      summary: "Create Review"
      operationId: "postReview"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Review"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Format error"
      x-swagger-router-controller: "Reviews"
  /review/{ReviewID}:
    get:
      tags:
      - "Reviews"
      summary: "Get Review by ID"
      operationId: "getReviewReviewID"
      produces:
      - "applications/json"
      parameters:
      - name: "ReviewID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "ReviewID format incorrect"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Review not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Reviews"
  /theme/:
    get:
      tags:
      - "Themes"
      summary: "Get all Themes"
      operationId: "getTheme"
      produces:
      - "applications/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Theme"
        404:
          description: "Theme not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Themes"
  /theme/findByBook:
    get:
      tags:
      - "Themes"
      summary: "Get Themes by book"
      operationId: "getThemeFindByBook"
      produces:
      - "applications/json"
      parameters:
      - name: "ISBN"
        in: "query"
        description: "ISBN of the Book"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Theme"
        400:
          description: "Invalid ISBN supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Theme not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Themes"
  /theme/{ThemeName}:
    get:
      tags:
      - "Themes"
      summary: "Get Theme by name"
      operationId: "getThemeThemeName"
      produces:
      - "applications/json"
      parameters:
      - name: "ThemeName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Theme"
        400:
          description: "Invalid theme supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Theme not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Themes"
  /user:
    post:
      tags:
      - "Users"
      summary: "Create User"
      operationId: "postUser"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - name: "user_mail"
          in: "formData"
          description: "user mail"
          type: "string"
          required: true
        - name: "password"
          in: "formData"
          description: "user password"
          type: "string"
          required: true
        - name: "username"
          in: "formData"
          description: "user name"
          type: "string"
          required: true
        - name: "user_shipping_address"
          in: "formData"
          description: "user shipping address"
          type: "string"
          required: true
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        400:
          description: "Format error"
      x-swagger-router-controller: "Users"
  /user/login:
    post:
      tags:
      - "Users"
      summary: "Perform User login"
      operationId: "postUserLogin"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "user_mail"
        in: "formData"
        description: "user mail"
        type: "string"
        required: true
      - name: "password"
        in: "formData"
        description: "user password"
        type: "string"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        404:
          description: "UserID or Password are wrong"
      x-swagger-router-controller: "Users"
  /user/logout:
    post:
      tags:
      - "Users"
      summary: "Perform User logout"
      operationId: "postUserLogout"
      parameters: []
      responses:
        200:
          description: "successful operation"
      x-swagger-router-controller: "Users"
  /user/check:
    get:
      tags:
        - "Users"
      summary: "Perform User Check"
      operationId: "getUserCheck"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
      x-swagger-router-controller: "Users"
  /user/{UserID}:
    get:
      tags:
      - "Users"
      summary: "Get User by ID"
      operationId: "getUserUserID"
      produces:
      - "applications/json"
      parameters:
      - name: "UserID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "UserID format incorrect"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User not Found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Users"
definitions:
  Book:
    type: "object"
    required:
    - "Abstract"
    - "Cover Image"
    - "Edition"
    - "ISBN"
    - "Language"
    - "Number of Pages"
    - "Publication Date"
    - "Publisher"
    - "Title"
    properties:
      ISBN:
        type: "integer"
        format: "int64"
      Title:
        type: "string"
      Abstract:
        type: "string"
      Publication Date:
        type: "string"
        format: "date-time"
      Edition:
        type: "integer"
        format: "int64"
      Cover Image:
        type: "string"
      Publisher:
        type: "string"
      Number of Pages:
        type: "integer"
        format: "int64"
      Language:
        type: "string"
  Theme:
    type: "object"
    required:
    - "ISBN"
    - "Theme"
    properties:
      Theme:
        type: "string"
      ISBN:
        type: "integer"
        format: "int64"
  Genre:
    type: "object"
    required:
    - "Genre"
    - "ISBN"
    properties:
      Genre:
        type: "string"
      ISBN:
        type: "integer"
        format: "int64"
  Author:
    type: "object"
    required:
    - "AuthorID"
    - "Bio"
    - "Date of Birth"
    - "Name"
    - "Picture"
    properties:
      AuthorID:
        type: "integer"
        format: "int64"
      Date of Birth:
        type: "string"
        format: "date-time"
      Name:
        type: "string"
      Picture:
        type: "string"
      Bio:
        type: "string"
  Event:
    type: "object"
    required:
    - "Details"
    - "Event Date"
    - "EventID"
    - "Introduction"
    - "Location Address"
    - "Name"
    - "Starting Time"
    properties:
      EventID:
        type: "number"
        format: "double"
      Name:
        type: "string"
      Introduction:
        type: "string"
      Location Address:
        type: "string"
      Event Date:
        type: "string"
        format: "date-time"
      Starting Time:
        type: "string"
      Details:
        type: "string"
  User:
    type: "object"
    required:
      - "user_mail"
      - "password"
      - "username"
      - "user_shipping_address"
    properties:
      user_mail:
        type: "string"
      password:
        type: "string"
      username:
        type: "string"
      user_shipping_address:
        type: "string"
  Purchase:
    type: "object"
    required:
    - "Completed"
    - "PurchaseID"
    - "UserID"
    properties:
      PurchaseID:
        type: "integer"
        format: "int64"
      UserID:
        type: "string"
      Completed:
        type: "boolean"
        default: false
      Purchase Date:
        type: "string"
        format: "date-time"
  Review:
    type: "object"
    required:
    - "ISBN"
    - "Rating"
    - "ReviewID"
    - "Text"
    - "UserID"
    properties:
      ReviewID:
        type: "integer"
        format: "int64"
      UserID:
        type: "string"
      ISBN:
        type: "integer"
        format: "int64"
      Text:
        type: "string"
      Rating:
        type: "integer"
        format: "int64"
  Error:
    type: "object"
    required:
    - "code"
    properties:
      code:
        type: "integer"
        format: "int64"
        description: "error code"
        minimum: 400
        maximum: 599
      description:
        type: "string"
      reasonPhrase:
        type: "string"
